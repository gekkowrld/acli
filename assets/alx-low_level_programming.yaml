# A simple representation of a directory structure
# This is for representation of the ALX School Curriculum
# Note: I don't have the full curriculum, so I'll just represent a few directories
# If you want to learn more about ALX School, visit https://www.alxafrica.com/
# The file structure is from Github repositories and not the official ALX School Curriculum
# The official curriculum is not open source (not publicly available)

# Initial data includes the contents that are expected to be in the file
# This is not the actual assignment, this is limited to only useful
# comments and shebangs (if any)
# Inclusion of any solutions is not allowed by both the ALX School
# and the spirit of the project and learning
# Only include information that is "boilerplate" and not the actual
# solution

# The information here is heavily generated by Github Copilot
# Some of the information may not be accurate
# Copyright infringement is not intended
#
# All copyrights are owned by their respective owners

projects:
  - name: alx-low_level_programming
    description: "Low Level Programming"
    directories:
      - name: 0x00-hello_world
        description: "C - Hello, World"
        id: 0x00
        files:
          - name: 0-preprocessor
            description: "Write a script that runs a C file through the preprocessor and save the result into another file."
            id: 0

            init_data: |
              #!/bin/bash

          - name: 1-compiler
            description: "Write a script that compiles a C file but does not link."
            id: 1

            init_data: |
              #!/bin/bash

          - name: 2-assembler
            description: "Write a script that generates the assembly code of a C code and save it in an output file."
            id: 2

            init_data: |
              #!/bin/bash

          - name: 3-name
            description: "Write a script that compiles a C file and creates an executable named cisfun."
            id: 3

            init_data: |
              #!/bin/bash

          - name: 4-puts.c
            description: "Write a C program that prints exactly \"Programming is like building a multilingual puzzle"
            id: 4

            init_data: ""

          - name: 5-printf.c
            description: "Write a C program that prints exactly with proper grammar, but the outcome is a piece of art,"
            id: 5

            init_data: ""

          - name: 6-size.c
            description: "Write a C program that prints the size of various types on the computer it is compiled and run on."
            id: 6

            init_data: ""

          - name: 100-intel
            description: "Write a script that generates the assembly code (Intel syntax) of a C code and save it in an output file."
            id: 100

            init_data: |
              #!/bin/bash

          - name: 101-quote.c
            description: "Write a C program that prints exactly and that piece of art is useful\" - Dora Korpar, 2015-10-19"
            id: 101

            init_data: ""

      - name: 0x01-variables_if_else_while
        description: "C - Variables, if, else, while"
        id: 0x01
        files:
          - name: 0-positive_or_negative.c
            description: "Write a program that prints whether a number is positive, negative, or zero."
            id: 0

            init_data: ""

          - name: 1-last_digit.c
            description: "Write a program that prints the last digit of a number."
            id: 1

            init_data: ""

          - name: 2-print_alphabet.c
            description: "Write a program that prints the alphabet in lowercase, followed by a new line."
            id: 2

            init_data: ""

          - name: 3-print_alphabets.c
            description: "Write a program that prints the alphabet in lowercase, followed by a new line."
            id: 3

            init_data: ""

          - name: 4-print_alphabt.c
            description: "Write a program that prints the alphabet in lowercase, followed by a new line."
            id: 4

            init_data: ""

          - name: 5-print_numbers.c
            description: "Write a program that prints all single digit numbers of base 10 starting from 0, followed by a new line."
            id: 5

            init_data: ""

          - name: 6-print_numberz.c
            description: "Write a program that prints all single digit numbers of base 10 starting from 0, followed by a new line."
            id: 6

            init_data: ""

          - name: 7-print_tebahpla.c
            description: "Write a program that prints the alphabet in lowercase, followed by a new line."
            id: 7

            init_data: ""

          - name: 8-print_base16.c
            description: "Write a program that prints all the numbers of base 16 in lowercase, followed by a new line."
            id: 8

            init_data: ""

          - name: 9-print_comb.c
            description: "Write a program that prints all possible combinations of single-digit numbers."
            id: 9

            init_data: ""

          - name: 100-print_comb3.c
            description: "Write a program that prints all possible different combinations of two digits."
            id: 100

            init_data: ""

          - name: 101-print_comb4.c
            description: "Write a program that prints all possible different combinations of three digits."
            id: 101

            init_data: ""

          - name: main.h
            description: "This is the header file for the project"
            id: 1000

            init_data: |
              #ifndef MAIN_H
              #define MAIN_H

              #endif

      - name: 0x02-functions_nested_loops
        id: 0x02
        description: "C - Functions, nested loops"
        files:
          - name: 0-holberton.c
            description: "Write a program that prints Holberton, followed by a new line."
            id: 0

            init_data: ""

          - name: 1-alphabet.c
            description: "Write a function that prints the alphabet, in lowercase, followed by a new line."
            id: 1

            init_data: ""

          - name: 2-print_alphabet_x10.c
            description: "Write a function that prints 10 times the alphabet, in lowercase, followed by a new line."
            id: 2

            init_data: ""

          - name: 3-islower.c
            description: "Write a function that checks for lowercase character."
            id: 3

            init_data: ""

          - name: 4-isalpha.c
            description: "Write a function that checks for alphabetic character."
            id: 4

            init_data: ""

          - name: 5-sign.c
            description: "Write a function that prints the sign of a number."
            id: 5

            init_data: ""

          - name: 6-abs.c
            description: "Write a function that computes the absolute value of an integer."
            id: 6

            init_data: ""

          - name: 7-print_last_digit.c
            description: "Write a function that prints the last digit of a number."
            id: 7

            init_data: ""

          - name: 8-24_hours.c
            description: "Write a function that prints every minute of the day of Jack Bauer, starting from 00:00 to 23:59."
            id: 8

            init_data: ""

          - name: 9-times_table.c
            description: "Write a function that prints the 9 times table, starting with 0."
            id: 9

            init_data: ""

          - name: 10-add.c
            description: "Write a function that adds two integers and returns the result."
            id: 10

            init_data: ""

          - name: 11-print_to_98.c
            description: "Write a function that prints all natural numbers from n to 98, followed by a new line."
            id: 11

            init_data: ""

          - name: main.h
            description: "This is the header file for the project"
            id: 1000

            init_data: |
              #ifndef MAIN_H
              #define MAIN_H

              #endif

      - name: 0x03-debugging
        id: 0x03
        description: "C - Debugging"
        files:
          - name: 0-main.c
            description: "Test the function that prints if a number is positive or negative."
            id: 0

            init_data: ""

          - name: 1-main.c
            description: "Test the function that prints the largest of three integers."
            id: 1

            init_data: ""

          - name: 2-largest_number.c
            description: "Fix the code in 2-largest_number.c so that it correctly prints out the largest of three numbers, no matter the case."
            id: 2

            init_data: ""

          - name: 3-print_remaining_days.c
            description: "Fix the print_remaining_days() function so that the output works correctly for all dates and all leap years."
            id: 3

            init_data: ""

          - name: main.h
            description: "This is the header file for the project"
            id: 1000

            init_data: |
              #ifndef MAIN_H
              #define MAIN_H

              #endif

      - name: 0x04-more_functions_nested_loops
        id: 0x04
        description: "C - More functions, more nested loops"
        files:
          - name: 0-isupper.c
            description: "Write a function that checks for uppercase character."
            id: 0

            init_data: ""

          - name: 1-isdigit.c
            description: "Write a function that checks for a digit (0 through 9)."
            id: 1

            init_data: ""

          - name: 2-mul.c
            description: "Write a function that multiplies two integers."
            id: 2

            init_data: ""

          - name: 3-print_numbers.c
            description: "Write a function that prints the numbers, from 0 to 9, followed by a new line."
            id: 3

            init_data: ""

          - name: 4-print_most_numbers.c
            description: "Write a function that prints the numbers, from 0 to 9, followed by a new line."
            id: 4

            init_data: ""

          - name: 5-more_numbers.c
            description: "Write a function that prints 10 times the numbers, from 0 to 14, followed by a new line."
            id: 5

            init_data: ""

          - name: 6-print_line.c
            description: "Write a function that draws a straight line in the terminal."
            id: 6

            init_data: ""

          - name: 7-print_diagonal.c
            description: "Write a function that draws a diagonal line on the terminal."
            id: 7

            init_data: ""

          - name: 8-print_square.c
            description: "Write a function that prints a square, followed by a new line."
            id: 8

            init_data: ""

          - name: 9-fizz_buzz.c
            description: "Write a function that prints the numbers from 1 to 100, followed by a new line."
            id: 9

            init_data: ""

          - name: 10-print_triangle.c
            description: "Write a function that prints a triangle, followed by a new line."
            id: 10

            init_data: ""

          - name: main.h
            description: "This is the header file for the project"
            id: 1000

            init_data: |
              #ifndef MAIN_H
              #define MAIN_H

              #endif

      - name: 0x05-pointers_arrays_strings
        id: 0x05
        description: "C - Pointers, arrays and strings"
        files:
          - name: 0-reset_to_98.c
            description: "Write a function that takes a pointer to an int as parameter and updates the value it points to to 98."
            id: 0

            init_data: ""

          - name: 1-swap.c
            description: "Write a function that swaps the values of two integers."
            id: 1

            init_data: ""

          - name: 2-strlen.c
            description: "Write a function that returns the length of a string."
            id: 2

            init_data: ""

          - name: 3-puts.c
            description: "Write a function that prints a string, followed by a new line, to stdout."
            id: 3

            init_data: ""

          - name: 4-print_rev.c
            description: "Write a function that prints a string, in reverse, followed by a new line."
            id: 4

            init_data: ""

          - name: 5-rev_string.c
            description: "Write a function that reverses a string."
            id: 5

            init_data: ""

          - name: 6-puts2.c
            description: "Write a function that prints every other character of a string, starting with the first character, followed by a new line."
            id: 6

            init_data: ""

          - name: 7-puts_half.c
            description: "Write a function that prints half of a string, followed by a new line."
            id: 7

            init_data: ""

          - name: 8-print_array.c
            description: "Write a function that prints n elements of an array of integers, followed by a new line."
            id: 8

            init_data: ""

          - name: 9-strcpy.c
            description: "Write a function that copies the string pointed to by src, including the terminating null byte (\0), to the buffer pointed to by dest."
            id: 9

            init_data: ""

          - name: main.h
            description: "This is the header file for the project"
            id: 1000

            init_data: |
              #ifndef MAIN_H
              #define MAIN_H

              #endif

      - name: 0x06-pointers_arrays_strings
        id: 0x06
        description: "C - More pointers, arrays and strings"
        files:
          - name: 0-strcat.c
            description: "Write a function that concatenates two strings."
            id: 0

            init_data: ""

          - name: 1-strncat.c
            description: "Write a function that concatenates two strings."
            id: 1

            init_data: ""

          - name: 2-strncpy.c
            description: "Write a function that copies a string."
            id: 2

            init_data: ""

          - name: 3-strcmp.c
            description: "Write a function that compares two strings."
            id: 3

            init_data: ""

          - name: 4-rev_array.c
            description: "Write a function that reverses the content of an array of integers."
            id: 4

            init_data: ""

          - name: 5-string_toupper.c
            description: "Write a function that changes all lowercase letters of a string to uppercase."
            id: 5

            init_data: ""

          - name: 6-cap_string.c
            description: "Write a function that capitalizes all words of a string."
            id: 6

            init_data: ""

          - name: 7-leet.c
            description: "Write a function that encodes a string into 1337."
            id: 7

            init_data: ""

          - name: 8-rot13.c
            description: "Write a function that encodes a string using rot13."
            id: 8

            init_data: ""

          - name: main.h
            description: "This is the header file for the project"
            id: 1000

            init_data: |
              #ifndef MAIN_H
              #define MAIN_H

              #endif

      - name: 0x07-pointers_arrays_strings
        id: 0x07
        description: "C - Even more pointers, arrays and strings"
        files:
          - name: 0-memset.c
            description: "Write a function that fills memory with a constant byte."
            id: 0

            init_data: ""

          - name: 1-memcpy.c
            description: "Write a function that copies memory area."
            id: 1

            init_data: ""

          - name: 2-strchr.c
            description: "Write a function that locates a character in a string."
            id: 2

            init_data: ""

          - name: 3-strspn.c
            description: "Write a function that gets the length of a prefix substring."
            id: 3

            init_data: ""

          - name: 4-strpbrk.c
            description: "Write a function that searches a string for any of a set of bytes."
            id: 4

            init_data: ""

          - name: 5-strstr.c
            description: "Write a function that locates a substring."
            id: 5

            init_data: ""

          - name: 6-strlen.c
            description: "Write a function that locates a substring."
            id: 6

            init_data: ""

          - name: 7-print_chessboard.c
            description: "Write a function that prints the chessboard."
            id: 7

            init_data: ""

          - name: 8-print_diagsums.c
            description: "Write a function that prints the sum of the two diagonals of a square matrix of integers."
            id: 8

            init_data: ""

          - name: 9-set_string.c
            description: "Write a function that sets the value of a pointer to a char."
            id: 9

            init_data: ""

          - name: main.h
            description: "This is the header file for the project"
            id: 1000

            init_data: |
              #ifndef MAIN_H
              #define MAIN_H

              #endif

      - name: 0x08-recursion
        id: 0x08
        description: "C - Recursion"
        files:
          - name: 0-puts_recursion.c
            description: "Write a function that prints a string, followed by a new line."
            id: 0

            init_data: ""

          - name: 1-print_rev_recursion.c
            description: "Write a function that prints a string in reverse."
            id: 1

            init_data: ""

          - name: 2-strlen_recursion.c
            description: "Write a function that returns the length of a string."
            id: 2

            init_data: ""

          - name: 3-factorial.c
            description: "Write a function that returns the factorial of a given number."
            id: 3

            init_data: ""

          - name: 4-pow_recursion.c
            description: "Write a function that returns the value of x raised to the power of y."
            id: 4

            init_data: ""

          - name: 5-sqrt_recursion.c
            description: "Write a function that returns the natural square root of a number."
            id: 5

            init_data: ""

          - name: 6-is_prime_number.c
            description: "Write a function that returns 1 if the input integer is a prime number, otherwise return 0."
            id: 6

            init_data: ""

          - name: 7-is_palindrome.c
            description: "Write a function that returns 1 if a string is a palindrome and 0 if not."
            id: 7

            init_data: ""

          - name: main.h
            description: "This is the header file for the project"
            id: 1000

            init_data: |
              #ifndef MAIN_H
              #define MAIN_H

              #endif

      - name: 0x0A-argc_argv
        id: 0x0A
        description: "C - argc, argv"
        files:
          - name: 0-whatsmyname.c
            description: "Write a program that prints its name, followed by a new line."
            id: 0

            init_data: ""

          - name: 1-args.c
            description: "Write a program that prints the number of arguments passed into it."
            id: 1

            init_data: ""

          - name: 2-args.c
            description: "Write a program that prints all arguments it receives."
            id: 2

            init_data: ""

          - name: 3-mul.c
            description: "Write a program that multiplies two numbers."
            id: 3

            init_data: ""

          - name: 4-add.c
            description: "Write a program that adds positive numbers."
            id: 4

            init_data: ""

      - name: 0x0B-malloc_free
        id: 0x0B
        description: "C - malloc, free"
        files:
          - name: 0-create_array.c
            description: "Write a function that creates an array of chars, and initializes it with a specific char."
            id: 0

            init_data: ""

          - name: 1-strdup.c
            description: "Write a function that returns a pointer to a newly allocated space in memory, which contains a copy of the string given as a parameter."
            id: 1

            init_data: ""

          - name: 2-str_concat.c
            description: "Write a function that concatenates two strings."
            id: 2

            init_data: ""

          - name: 3-alloc_grid.c
            description: "Write a function that returns a pointer to a 2 dimensional array of integers."
            id: 3

            init_data: ""

          - name: 4-free_grid.c
            description: "Write a function that frees a 2 dimensional grid previously created by your alloc_grid function."
            id: 4

            init_data: ""

          - name: 5-argstostr.c
            description: "Write a function that concatenates all the arguments of your program."
            id: 5

            init_data: ""

          - name: main.h
            description: "This is the header file for the project"
            id: 1000

            init_data: |
              #ifndef MAIN_H
              #define MAIN_H

              #endif

      - name: 0x0C-more_malloc_free
        id: 0x0C
        description: "C - More malloc, free"
        files:
          - name: 0-malloc_checked.c
            description: "Write a function that allocates memory using malloc."
            id: 0

            init_data: ""

          - name: 1-string_nconcat.c
            description: "Write a function that concatenates two strings."
            id: 1

            init_data: ""

          - name: 2-calloc.c
            description: "Write a function that allocates memory for an array, using malloc."
            id: 2

            init_data: ""

          - name: 3-array_range.c
            description: "Write a function that creates an array of integers."
            id: 3

            init_data: ""

      - name: 0x0D-preprocessor
        id: 0x0D
        description: "C - Preprocessor"
        files:
          - name: 0-object_like_macro.h
            description: "Create a header file that defines a macro named SIZE as an abbreviation for the token 1024."
            id: 0

            init_data: ""

          - name: 1-pi.h
            description: "Create a header file that defines a macro named PI as an abbreviation for the token 3.14159265359."
            id: 1

            init_data: ""

          - name: 2-main.c
            description: "Write a program that prints the name of the file it was compiled from, followed by a new line."
            id: 2

            init_data: ""

          - name: 3-function_like_macro.h
            description: "Write a function-like macro ABS(x) that computes the absolute value of a number x."
            id: 3

            init_data: ""

          - name: 4-sum.h
            description: "Write a function-like macro SUM(x, y) that computes the sum of the numbers x and y."
            id: 4

            init_data: ""

      - name: 0x0E-structures_typedef
        id: 0x0E
        description: "C - Structures, typedef"
        files:
          - name: dog.h
            description: "Define a new type struct dog with the following elements: name, age, owner."
            id: 0

            init_data: ""

          - name: 1-init_dog.c
            description: "Write a function that initializes a variable of type struct dog."
            id: 1

            init_data: ""

          - name: 2-print_dog.c
            description: "Write a function that prints a struct dog."
            id: 2

            init_data: ""

          - name: 4-new_dog.c
            description: "Write a function that creates a new dog."
            id: 4

            init_data: ""

          - name: 5-free_dog.c
            description: "Write a function that frees dogs."
            id: 5

            init_data: ""

          - name: dog.h
            description: "This is the header file for the project"
            id: 1000

            init_data: |
              #ifndef DOG_H
              #define DOG_H

              struct dog
              {
                  char *name;
                  float age;
                  char *owner;
              };

              #endif

      - name: 0x0F-function_pointers
        id: 0x0F
        description: "C - Function pointers"
        files:
          - name: 0-print_name.c
            description: "Write a function that prints a name."
            id: 0

            init_data: ""

          - name: 1-array_iterator.c
            description: "Write a function that executes a function given as a parameter on each element of an array."
            id: 1

            init_data: ""

          - name: 2-int_index.c
            description: "Write a function that searches for an integer."
            id: 2

            init_data: ""

          - name: 3-main.c
            description: "Write a program that performs simple operations."
            id: 3

            init_data: ""

          - name: 3-op_functions.c
            description: "This is the header file for the project"
            id: 1000

            init_data: |
              #ifndef FUNCTION_POINTERS_H
              #define FUNCTION_POINTERS_H

              #endif

      - name: 0x10-variadic_functions
        id: 0x10
        description: "C - Variadic functions"
        files:
          - name: 0-sum_them_all.c
            description: "Write a function that returns the sum of all its parameters."
            id: 0

            init_data: ""

          - name: 1-print_numbers.c
            description: "Write a function that prints numbers, followed by a new line."
            id: 1

            init_data: ""

          - name: 2-print_strings.c
            description: "Write a function that prints strings, followed by a new line."
            id: 2

            init_data: ""

          - name: 3-print_all.c
            description: "Write a function that prints anything."
            id: 3

            init_data: ""

      - name: 0x12-singly_linked_lists
        id: 0x12
        description: "C - Singly linked lists"
        files:
          - name: 0-print_list.c
            description: "Write a function that prints all the elements of a list_t list."
            id: 0

            init_data: ""

          - name: 1-list_len.c
            description: "Write a function that returns the number of elements in a linked list_t list."
            id: 1

            init_data: ""

          - name: 2-add_node.c
            description: "Write a function that adds a new node at the beginning of a list_t list."
            id: 2

            init_data: ""

          - name: 3-add_node_end.c
            description: "Write a function that adds a new node at the end of a list_t list."
            id: 3

            init_data: ""

          - name: 4-free_list.c
            description: "Write a function that frees a list_t list."
            id: 4

            init_data: ""

          - name: list.h
            description: "This is the header file for the project"
            id: 1000

            init_data: |
              #ifndef LIST_H
              #define LIST_H

              #endif

      - name: 0x13-more_singly_linked_lists
        id: 0x13
        description: "C - More singly linked lists"
        files:
          - name: 0-print_listint.c
            description: "Write a function that prints all the elements of a listint_t list."
            id: 0

            init_data: ""

          - name: 1-listint_len.c
            description: "Write a function that returns the number of elements in a linked listint_t list."
            id: 1

            init_data: ""

          - name: 2-add_nodeint.c
            description: "Write a function that adds a new node at the beginning of a listint_t list."
            id: 2

            init_data: ""

          - name: 3-add_nodeint_end.c
            description: "Write a function that adds a new node at the end of a listint_t list."
            id: 3

            init_data: ""

          - name: 4-free_listint.c
            description: "Write a function that frees a listint_t list."
            id: 4

            init_data: ""

          - name: 5-free_listint2.c
            description: "Write a function that frees a listint_t list."
            id: 5

            init_data: ""

          - name: 6-pop_listint.c
            description: "Write a function that deletes the head node of a listint_t linked list, and returns the head node’s data."
            id: 6

            init_data: ""

          - name: 7-get_nodeint.c
            description: "Write a function that returns the nth node of a listint_t linked list."
            id: 7

            init_data: ""

          - name: 8-sum_listint.c
            description: "Write a function that returns the sum of all the data (n) of a listint_t linked list."
            id: 8

            init_data: ""

          - name: 9-insert_nodeint.c
            description: "Write a function that inserts a new node at a given position."
            id: 9

            init_data: ""

          - name: 10-delete_nodeint.c
            description: "Write a function that deletes the node at index index of a listint_t linked list."
            id: 10

            init_data: ""

          - name: list.h
            description: "This is the header file for the project"
            id: 1000

            init_data: |
              #ifndef LIST_H
              #define LIST_H

              #endif

      - name: 0x14-bit_manipulation
        id: 0x14
        description: "C - Bit manipulation"
        files:
          - name: 0-binary_to_uint.c
            description: "Write a function that converts a binary number to an unsigned int."
            id: 0

            init_data: ""

          - name: 1-print_binary.c
            description: "Write a function that prints the binary representation of a number."
            id: 1

            init_data: ""

          - name: 2-get_bit.c
            description: "Write a function that returns the value of a bit at a given index."
            id: 2

            init_data: ""

          - name: 3-set_bit.c
            description: "Write a function that sets the value of a bit to 1 at a given index."
            id: 3

            init_data: ""

          - name: 4-clear_bit.c
            description: "Write a function that sets the value of a bit to 0 at a given index."
            id: 4

            init_data: ""

          - name: 5-flip_bits.c
            description: "Write a function that returns the number of bits you would need to flip to get from one number to another."
            id: 5

            init_data: ""

      - name: 0x15-file_io
        id: 0x15
        description: "C - File I/O"
        files:
          - name: 0-read_textfile.c
            description: "Write a function that reads a text file and prints it to the POSIX standard output."
            id: 0

            init_data: ""

          - name: 1-create_file.c
            description: "Write a function that creates a file."
            id: 1

            init_data: ""

          - name: 2-append_text_to_file.c
            description: "Write a function that appends text at the end of a file."
            id: 2

            init_data: ""

      - name: 0x17-doubly_linked_lists
        id: 0x17
        description: "C - Doubly linked lists"
        files:
          - name: 0-print_dlistint.c
            description: "Write a function that prints all the elements of a dlistint_t list."
            id: 0

            init_data: ""

          - name: 1-dlistint_len.c
            description: "Write a function that returns the number of elements in a linked dlistint_t list."
            id: 1

            init_data: ""

          - name: 2-add_dnodeint.c
            description: "Write a function that adds a new node at the beginning of a dlistint_t list."
            id: 2

            init_data: ""

          - name: 3-add_dnodeint_end.c
            description: "Write a function that adds a new node at the end of a dlistint_t list."
            id: 3

            init_data: ""

          - name: 4-free_dlistint.c
            description: "Write a function that frees a dlistint_t list."
            id: 4

            init_data: ""

          - name: 5-get_dnodeint.c
            description: "Write a function that returns the nth node of a dlistint_t linked list."
            id: 5

            init_data: ""

          - name: 6-sum_dlistint.c
            description: "Write a function that returns the sum of all the data (n) of a dlistint_t linked list."
            id: 6

            init_data: ""

          - name: 7-insert_dnodeint.c
            description: "Write a function that inserts a new node at a given position."
            id: 7

            init_data: ""

          - name: 8-delete_dnodeint.c
            description: "Write a function that deletes the node at index index of a dlistint_t linked list."
            id: 8

            init_data: ""

          - name: list.h
            description: "This is the header file for the project"
            id: 1000

            init_data: |
              #ifndef LIST_H
              #define LIST_H

              #endif

      - name: 0x18-dynamic_libraries
        id: 0x18
        description: "C - Dynamic libraries"
        files:
          - name: libholberton.so
            description: "Create the dynamic library libholberton.so containing all the functions listed below."
            id: 0

            init_data: ""

          - name: 1-create_dynamic_lib.sh
            description: "Create a script that creates a dynamic library called liball.so from all the .c files that are in the current directory."
            id: 1

            init_data: |
              #!/bin/bash

      - name: 0x1A-hash_tables
        id: 0x1A
        description: "C - Hash tables"
        files:
          - name: 0-hash_table_create.c
            description: "Write a function that creates a hash table."
            id: 0

            init_data: ""

          - name: 1-djb2.c
            description: "Write a hash function implementing the djb2 algorithm."
            id: 1

            init_data: ""

          - name: 2-key_index.c
            description: "Write a function that gives you the index of a key."
            id: 2

            init_data: ""

          - name: 3-hash_table_set.c
            description: "Write a function that adds an element to the hash table."
            id: 3

            init_data: ""

          - name: 4-hash_table_get.c
            description: "Write a function that retrieves a value associated with a key."
            id: 4

            init_data: ""

          - name: 5-hash_table_print.c
            description: "Write a function that prints a hash table."
            id: 5

            init_data: ""

          - name: 6-hash_table_delete.c
            description: "Write a function that deletes a hash table."
            id: 6

            init_data: ""

          - name: hash_tables.h
            description: "This is the header file for the project"
            id: 1000

            init_data: |
              #ifndef HASH_TABLES_H
              #define HASH_TABLES_H

              #endif

      - name: 0x1B-sorting_algorithms
        id: 0x1B
        description: "C - Sorting algorithms & Big O"
        files:
          - name: 0-bubble_sort.c
            description: "Write a function that sorts an array of integers in ascending order using the Bubble sort algorithm."
            id: 0

            init_data: ""

          - name: 0-O
            description: "What is the time complexity (worst case) of a bubble sort algorithm?"
            id: 1

            init_data: ""

          - name: 1-insertion_sort_list.c
            description: "Write a function that sorts a doubly linked list of integers in ascending order using the Insertion sort algorithm."
            id: 2

            init_data: ""

          - name: 1-O
            description: "What is the time complexity (worst case) of an insertion sort algorithm?"
            id: 3

            init_data: ""

          - name: 2-selection_sort.c
            description: "Write a function that sorts an array of integers in ascending order using the Selection sort algorithm."
            id: 4

            init_data: ""

          - name: 2-O
            description: "What is the time complexity (worst case) of a selection sort algorithm?"
            id: 5

            init_data: ""

          - name: 3-quick_sort.c
            description: "Write a function that sorts an array of integers in ascending order using the Quick sort algorithm."
            id: 6

            init_data: ""

          - name: 3-O
            description: "What is the time complexity (worst case) of a quick sort algorithm?"
            id: 7

            init_data: ""

          - name: 100-shell_sort.c
            description: "Write a function that sorts an array of integers in ascending order using the Shell sort algorithm, using the Knuth sequence."
            id: 8

            init_data: ""

          - name: 101-O
            description: "What is the time complexity (average case) of a shell sort algorithm?"
            id: 9

            init_data: ""

          - name: 102-counting_sort.c
            description: "Write a function that sorts an array of integers in ascending order using the Counting sort algorithm."
            id: 10

            init_data: ""

          - name: 102-O
            description: "What is the space complexity (worst case) of a counting sort algorithm?"
            id: 11

            init_data: ""

          - name: 103-merge_sort.c
            description: "Write a function that sorts an array of integers in ascending order using the Merge sort algorithm."
            id: 12

            init_data: ""

          - name: 103-O
            description: "What is the time complexity (average case) of a merge sort algorithm?"
            id: 13

            init_data: ""

          - name: 104-heap_sort.c
            description: "Write a function that sorts an array of integers in ascending order using the Heap sort algorithm."
            id: 14

            init_data: ""

          - name: 104-O
            description: "What is the space complexity (worst case) of a heap sort algorithm?"
            id: 15

            init_data: ""

          - name: 105-radix_sort.c
            description: "Write a function that sorts an array of integers in ascending order using the Radix sort algorithm."
            id: 16

            init_data: ""

          - name: 105-O
            description: "What is the space complexity (worst case) of a radix sort algorithm?"
            id: 17

            init_data: ""

          - name: 106-bitonic_sort.c
            description: "Write a function that sorts an array of integers in ascending order using the Bitonic sort algorithm."
            id: 18

            init_data: ""

          - name: 106-O
            description: "What is the time complexity (average case) of a bitonic sort algorithm?"
            id: 19

            init_data: ""

          - name: 107-quick_sort_hoare.c
            description: "Write a function that sorts an array of integers in ascending order using the Quick sort algorithm."
            id: 20

            init_data: ""

          - name: 107-O
            description: "What is the time complexity (average case) of a quick sort algorithm in the Hoare partition scheme?"
            id: 21

            init_data: ""

      - name: 0x1C-makefiles
        id: 0x1C
        description: "C - Makefiles"
        files:
          - name: 0-Makefile
            description: "Create your first Makefile."
            id: 0

            init_data: ""

          - name: 1-Makefile
            description: "Create your first useful Makefile."
            id: 1

            init_data: ""

          - name: 2-Makefile
            description: "Create your first useful Makefile."
            id: 2

            init_data: ""

          - name: 3-Makefile
            description: "Create your first useful Makefile."
            id: 3

            init_data: ""

          - name: 4-Makefile
            description: "Create your first useful Makefile."
            id: 4

            init_data: ""

          - name: 5-island_perimeter.py
            description: "Create a function def island_perimeter(grid): that returns the perimeter of the island described in grid."
            id: 5

            init_data: ""

      - name: 0x1D-binary_trees
        id: 0x1D
        description: "C - Binary trees"
        files:
          - name: 0-binary_tree_node.c
            description: "Write a function that creates a binary tree node."
            id: 0

            init_data: ""

          - name: 1-binary_tree_insert_left.c
            description: "Write a function that inserts a node as the left-child of another node."
            id: 1

            init_data: ""

          - name: 2-binary_tree_insert_right.c
            description: "Write a function that inserts a node as the right-child of another node."
            id: 2

            init_data: ""

          - name: 3-binary_tree_delete.c
            description: "Write a function that deletes an entire binary tree."
            id: 3

            init_data: ""

          - name: 4-binary_tree_is_leaf.c
            description: "Write a function that checks if a node is a leaf."
            id: 4

            init_data: ""

          - name: 5-binary_tree_is_root.c
            description: "Write a function that checks if a given node is a root."
            id: 5

            init_data: ""

          - name: 6-binary_tree_preorder.c
            description: "Write a function that goes through a binary tree using pre-order traversal."
            id: 6

            init_data: ""

          - name: 7-binary_tree_inorder.c
            description: "Write a function that goes through a binary tree using in-order traversal."
            id: 7

            init_data: ""

          - name: 8-binary_tree_postorder.c
            description: "Write a function that goes through a binary tree using post-order traversal."
            id: 8

            init_data: ""

          - name: 9-binary_tree_height.c
            description: "Write a function that measures the height of a binary tree."
            id: 9

            init_data: ""

          - name: 10-binary_tree_depth.c
            description: "Write a function that measures the depth of a node in a binary tree."
            id: 10

            init_data: ""

          - name: 11-binary_tree_size.c
            description: "Write a function that measures the size of a binary tree."
            id: 11

            init_data: ""

          - name: 12-binary_tree_leaves.c
            description: "Write a function that counts the leaves in a binary tree."
            id: 12

            init_data: ""

          - name: 13-binary_tree_nodes.c
            description: "Write a function that counts the nodes with at least 1 child in a binary tree."
            id: 13

            init_data: ""

          - name: 14-binary_tree_balance.c
            description: "Write a function that measures the balance factor of a binary tree."
            id: 14

            init_data: ""

          - name: 15-binary_tree_is_full.c
            description: "Write a function that checks if a binary tree is full."
            id: 15

            init_data: ""

          - name: 16-binary_tree_is_perfect.c
            description: "Write a function that checks if a binary tree is perfect."
            id: 16

            init_data: ""

          - name: 17-binary_tree_sibling.c
            description: "Write a function that finds the sibling of a node."
            id: 17

            init_data: ""

          - name: 18-binary_tree_uncle.c
            description: "Write a function that finds the uncle of a node."
            id: 18

            init_data: ""

          - name: binary_trees.h
            description: "This is the header file for the project"
            id: 1000

            init_data: |
              #ifndef BINARY_TREES_H
              #define BINARY_TREES_H

              #endif

      - name: 0x1E-search_algorithms
        id: 0x1E
        description: "C - Search Algorithms"
        files:
          - name: 0-linear_search.c
            description: "Write a function that searches for a value in an array of integers using the Linear search algorithm."
            id: 0

            init_data: ""

          - name: 1-binary_search.c
            description: "Write a function that searches for a value in a sorted array of integers using the Binary search algorithm."
            id: 1

            init_data: ""

          - name: 2-O
            description: "What is the time complexity (worst case) of a linear search in an array of size n?"
            id: 2

            init_data: ""

          - name: 3-O
            description: "What is the space complexity (worst case) of an iterative linear search algorithm in an array of size n?"
            id: 3

            init_data: ""

          - name: 4-O
            description: "What is the time complexity (worst case) of a binary search in an array of size n?"
            id: 4

            init_data: ""

          - name: 5-O
            description: "What is the space complexity (worst case) of a binary search in an array of size n?"
            id: 5

            init_data: ""

          - name: 6-jump_list.c
            description: "Write a function that searches for a value in a sorted list of integers using the Jump search algorithm."
            id: 6

            init_data: ""

          - name: 7-O
            description: "What is the time complexity (average case) of a jump search in a singly linked list of size n, using step = sqrt(n)?"
            id: 7

            init_data: ""

          - name: 8-O
            description: "What is the time complexity (average case) of a jump search in a singly linked list of size n, using step = n^(1/2)?"
            id: 8

            init_data: ""

          - name: 9-O
            description: "What is the space complexity (worst case) of a jump search in a singly linked list of size n?"
            id: 9

            init_data: ""

          - name: 10-O
            description: "What is the space complexity (worst case) of an iterative jump search in an array of size n?"
            id: 10

            init_data: ""

          - name: 100-linear_skip.c
            description: "Write a function that searches for a value in a sorted skip list of integers."
            id: 11

            init_data: ""

          - name: 101-O
            description: "What is the time complexity (average case) of a linear search in a skip list of size n, with express lane using step = sqrt(n)?"
            id: 12

            init_data: ""

          - name: 102-O
            description: "What is the space complexity (worst case) of a linear search in a skip list of size n, with express lane using step = sqrt(n)?"
            id: 13

            init_data: ""

          - name: 103-O
            description: "What is the time complexity (average case) of a linear search in a skip list of size n, with express lane using step = n^(1/2)?"
            id: 14

            init_data: ""

          - name: 104-O
            description: "What is the space complexity (worst case) of a linear search in a skip list of size n, with express lane using step = n^(1/2)?"
            id: 15

            init_data: ""

          - name: 105-O
            description: "What is the time complexity (average case) of a linear search in a skip list of size n, with express lane using step = n^(1/3)?"
            id: 16

            init_data: ""

          - name: 106-O
            description: "What is the space complexity (worst case) of a linear search in a skip list of size n, with express lane using step = n^(1/3)?"
            id: 17

            init_data: ""

          - name: 107-O
            description: "What is the time complexity (average case) of a linear search in a skip list of size n, with express lane using step = log(n)?"
            id: 18

            init_data: ""

